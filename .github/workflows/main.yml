name: Build StreamDeck plugin

on:
  push:
    tags:
      - '*'

jobs:
  information-ubuntu:
    runs-on: ubuntu-latest

    steps:
      - name: Define sources
        run: echo ${GITHUB_REF#refs/tags/} > tags.txt

      - name: Upload tags
        uses: actions/upload-artifact@v2
        with:
          name: github-tags
          path: tags.txt

  build-windows:
    runs-on: windows-latest

    steps:
      # Checking-outrepository under $GITHUB_WORKSPACE
      - uses: actions/checkout@v2

      # Build python
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
          architecture: x64

      - name: Install dependencies
        uses: BSFishy/pip-action@v1
        with:
          #requirements: requirements.txt
          requirements: requirements-win.txt

      # - name: Run PyInstaller
      #   run: python -m PyInstaller -F plugin\main.spec

      # # Artifact handeling
      # - name: Upload artifact
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: windows-plugin
      #     path: dist\StreamDeckUnity.exe

      - name: Run Nuitka
        run: python -m nuitka --mingw64 --follow-imports plugin\main.py --show-progress --standalone --assume-yes-for-downloads

      - name: Rename .exe file
        run: ren main.dist\main.exe StreamDeckUnity.exe

      # Artifact handeling
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: windows-plugin
          path: main.dist\*

  build-macos:
    runs-on: macos-latest

    steps:
      # Checking-outrepository under $GITHUB_WORKSPACE
      - uses: actions/checkout@v2

      # Build python
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
          architecture: x64

      - name: Install dependencies
        uses: BSFishy/pip-action@v1
        with:
          #requirements: requirements.txt
          requirements: requirements-osx.txt

      - name: Run PyInstaller
        run: python -m PyInstaller plugin/main.spec

      # Artifact handeling
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: macos-plugin
          path: dist/StreamDeckUnity

  release-export:
    needs: [information-ubuntu, build-windows, build-macos]
    runs-on: windows-latest

    steps:
      # Checking-outrepository under $GITHUB_WORKSPACE
      - uses: actions/checkout@v2

      - name: Prepare directory files
        run: |
          mkdir release
          mkdir com.adamcarballo.unity-integration.sdPlugin
          mkdir com.adamcarballo.unity-integration.sdPlugin\plugin
          mkdir com.adamcarballo.unity-integration.sdPlugin\plugin\dist
          move pi com.adamcarballo.unity-integration.sdPlugin\pi
          move plugin\images com.adamcarballo.unity-integration.sdPlugin\plugin\images
          move LICENSE com.adamcarballo.unity-integration.sdPlugin\LICENSE
          move manifest.json com.adamcarballo.unity-integration.sdPlugin\manifest.json

      # Artifact handeling
      - name: Download tags
        uses: actions/download-artifact@v2
        with:
          name: github-tags

      - name: Download Windows artifact
        uses: actions/download-artifact@v2
        with:
          name: windows-plugin
          path: com.adamcarballo.unity-integration.sdPlugin\plugin\dist

      - name: Download MacOS artifact
        uses: actions/download-artifact@v2
        with:
          name: macos-plugin
          path: com.adamcarballo.unity-integration.sdPlugin\plugin\dist

      - name: Set tags
        run: echo "TAG=$(type tags.txt)" >> $env:GITHUB_ENV

      # Build StreamDeck plugin
      - name: StreamDeck Distribution Tool
        uses: AdamCarballo/streamdeck-distribution-tool@v1
        with:
          input: com.adamcarballo.unity-integration.sdPlugin
          output: release

      # Create Release
      - name: Create draft release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "${{ env.TAG }}"
          release_name: Automated tagged release
          draft: true
          prerelease: false

      - name: Upload draft release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release\com.adamcarballo.unity-integration.streamDeckPlugin
          asset_name: com.adamcarballo.unity-integration.streamDeckPlugin
          asset_content_type: application/zip

      - name: Publish draft release
        uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create_release.outputs.id }}
